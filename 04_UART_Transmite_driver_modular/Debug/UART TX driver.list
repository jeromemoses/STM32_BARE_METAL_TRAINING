
UART TX driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  4 .ARM          00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000350  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000350  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000352  00000000  00000000  000103bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000f6  00000000  00000000  0001070d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00010850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012354  00000000  00000000  0001087d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005d4  00000000  00000000  00022bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006234c  00000000  00000000  000231a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000a4  00000000  00000000  000854f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00085598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800031c 	.word	0x0800031c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800031c 	.word	0x0800031c

08000108 <main>:
#define TE			(1U<<3)
#define UE			(1U<<0)
#define OVER8 		(1U<<15)
#define TXE			(1U<<7)

int main(void) {
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b091      	sub	sp, #68	; 0x44
 800010c:	af00      	add	r7, sp, #0

	//set clock to GPIO A port
	RCC->AHBENR |= GPIOAEN;
 800010e:	4b4c      	ldr	r3, [pc, #304]	; (8000240 <main+0x138>)
 8000110:	695a      	ldr	r2, [r3, #20]
 8000112:	4b4b      	ldr	r3, [pc, #300]	; (8000240 <main+0x138>)
 8000114:	2180      	movs	r1, #128	; 0x80
 8000116:	0289      	lsls	r1, r1, #10
 8000118:	430a      	orrs	r2, r1
 800011a:	615a      	str	r2, [r3, #20]

	//setting PA2 (UART TX pins) as for alternative function for UART pin
	GPIOA->MODER |= (1U<<5);
 800011c:	2390      	movs	r3, #144	; 0x90
 800011e:	05db      	lsls	r3, r3, #23
 8000120:	681a      	ldr	r2, [r3, #0]
 8000122:	2390      	movs	r3, #144	; 0x90
 8000124:	05db      	lsls	r3, r3, #23
 8000126:	2120      	movs	r1, #32
 8000128:	430a      	orrs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U<<4);
 800012c:	2390      	movs	r3, #144	; 0x90
 800012e:	05db      	lsls	r3, r3, #23
 8000130:	681a      	ldr	r2, [r3, #0]
 8000132:	2390      	movs	r3, #144	; 0x90
 8000134:	05db      	lsls	r3, r3, #23
 8000136:	2110      	movs	r1, #16
 8000138:	438a      	bics	r2, r1
 800013a:	601a      	str	r2, [r3, #0]

	//Setting GPIOA - Pin 5 as a output with moder Register
	GPIOA->MODER |= (1U << 10);
 800013c:	2390      	movs	r3, #144	; 0x90
 800013e:	05db      	lsls	r3, r3, #23
 8000140:	681a      	ldr	r2, [r3, #0]
 8000142:	2390      	movs	r3, #144	; 0x90
 8000144:	05db      	lsls	r3, r3, #23
 8000146:	2180      	movs	r1, #128	; 0x80
 8000148:	00c9      	lsls	r1, r1, #3
 800014a:	430a      	orrs	r2, r1
 800014c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U << 11);
 800014e:	2390      	movs	r3, #144	; 0x90
 8000150:	05db      	lsls	r3, r3, #23
 8000152:	681a      	ldr	r2, [r3, #0]
 8000154:	2390      	movs	r3, #144	; 0x90
 8000156:	05db      	lsls	r3, r3, #23
 8000158:	493a      	ldr	r1, [pc, #232]	; (8000244 <main+0x13c>)
 800015a:	400a      	ands	r2, r1
 800015c:	601a      	str	r2, [r3, #0]

	//Setting PA2 as UART2 TX
	GPIOA->AFR[0] &= ~(1U<<11);
 800015e:	2390      	movs	r3, #144	; 0x90
 8000160:	05db      	lsls	r3, r3, #23
 8000162:	6a1a      	ldr	r2, [r3, #32]
 8000164:	2390      	movs	r3, #144	; 0x90
 8000166:	05db      	lsls	r3, r3, #23
 8000168:	4936      	ldr	r1, [pc, #216]	; (8000244 <main+0x13c>)
 800016a:	400a      	ands	r2, r1
 800016c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1U<<10);
 800016e:	2390      	movs	r3, #144	; 0x90
 8000170:	05db      	lsls	r3, r3, #23
 8000172:	6a1a      	ldr	r2, [r3, #32]
 8000174:	2390      	movs	r3, #144	; 0x90
 8000176:	05db      	lsls	r3, r3, #23
 8000178:	4933      	ldr	r1, [pc, #204]	; (8000248 <main+0x140>)
 800017a:	400a      	ands	r2, r1
 800017c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1U<<9);
 800017e:	2390      	movs	r3, #144	; 0x90
 8000180:	05db      	lsls	r3, r3, #23
 8000182:	6a1a      	ldr	r2, [r3, #32]
 8000184:	2390      	movs	r3, #144	; 0x90
 8000186:	05db      	lsls	r3, r3, #23
 8000188:	4930      	ldr	r1, [pc, #192]	; (800024c <main+0x144>)
 800018a:	400a      	ands	r2, r1
 800018c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1U<<8);
 800018e:	2390      	movs	r3, #144	; 0x90
 8000190:	05db      	lsls	r3, r3, #23
 8000192:	6a1a      	ldr	r2, [r3, #32]
 8000194:	2390      	movs	r3, #144	; 0x90
 8000196:	05db      	lsls	r3, r3, #23
 8000198:	2180      	movs	r1, #128	; 0x80
 800019a:	0049      	lsls	r1, r1, #1
 800019c:	430a      	orrs	r2, r1
 800019e:	621a      	str	r2, [r3, #32]

	//setting clock to Advanced peripheral bus for USART
	RCC->APB1ENR |= USART2EN;
 80001a0:	4b27      	ldr	r3, [pc, #156]	; (8000240 <main+0x138>)
 80001a2:	69da      	ldr	r2, [r3, #28]
 80001a4:	4b26      	ldr	r3, [pc, #152]	; (8000240 <main+0x138>)
 80001a6:	2180      	movs	r1, #128	; 0x80
 80001a8:	0289      	lsls	r1, r1, #10
 80001aa:	430a      	orrs	r2, r1
 80001ac:	61da      	str	r2, [r3, #28]
	 * baudrate = Fclk / USARTDIV
	 *
	 * */

	//sets the baud rate
	USART2->BRR |= (periphCLK / BAUDRATE);//(periphCLK + (BAUDRATE/2)) / BAUDRATE;
 80001ae:	4b28      	ldr	r3, [pc, #160]	; (8000250 <main+0x148>)
 80001b0:	68da      	ldr	r2, [r3, #12]
 80001b2:	4b27      	ldr	r3, [pc, #156]	; (8000250 <main+0x148>)
 80001b4:	2145      	movs	r1, #69	; 0x45
 80001b6:	430a      	orrs	r2, r1
 80001b8:	60da      	str	r2, [r3, #12]

	//Enable transmitter
	USART2->CR1 |= TE;
 80001ba:	4b25      	ldr	r3, [pc, #148]	; (8000250 <main+0x148>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b24      	ldr	r3, [pc, #144]	; (8000250 <main+0x148>)
 80001c0:	2108      	movs	r1, #8
 80001c2:	430a      	orrs	r2, r1
 80001c4:	601a      	str	r2, [r3, #0]

	//Enable the USART2
	USART2->CR1 |= UE;
 80001c6:	4b22      	ldr	r3, [pc, #136]	; (8000250 <main+0x148>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b21      	ldr	r3, [pc, #132]	; (8000250 <main+0x148>)
 80001cc:	2101      	movs	r1, #1
 80001ce:	430a      	orrs	r2, r1
 80001d0:	601a      	str	r2, [r3, #0]

	char string[50] = "Praise the lord\n";
 80001d2:	1d3c      	adds	r4, r7, #4
 80001d4:	4b1f      	ldr	r3, [pc, #124]	; (8000254 <main+0x14c>)
 80001d6:	0020      	movs	r0, r4
 80001d8:	0019      	movs	r1, r3
 80001da:	2311      	movs	r3, #17
 80001dc:	001a      	movs	r2, r3
 80001de:	f000 f893 	bl	8000308 <memcpy>
 80001e2:	2311      	movs	r3, #17
 80001e4:	18e3      	adds	r3, r4, r3
 80001e6:	2221      	movs	r2, #33	; 0x21
 80001e8:	2100      	movs	r1, #0
 80001ea:	0018      	movs	r0, r3
 80001ec:	f000 f85f 	bl	80002ae <memset>

	int j = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	63fb      	str	r3, [r7, #60]	; 0x3c

	while (1)
	{
		while((USART2->ISR & TXE)==0){}
 80001f4:	46c0      	nop			; (mov r8, r8)
 80001f6:	4b16      	ldr	r3, [pc, #88]	; (8000250 <main+0x148>)
 80001f8:	69db      	ldr	r3, [r3, #28]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	4013      	ands	r3, r2
 80001fe:	d0fa      	beq.n	80001f6 <main+0xee>
		USART2->TDR = (string[j++] & 0xff);
 8000200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000202:	1c5a      	adds	r2, r3, #1
 8000204:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000206:	1d3a      	adds	r2, r7, #4
 8000208:	5cd2      	ldrb	r2, [r2, r3]
 800020a:	4b11      	ldr	r3, [pc, #68]	; (8000250 <main+0x148>)
 800020c:	b292      	uxth	r2, r2
 800020e:	851a      	strh	r2, [r3, #40]	; 0x28

		for(int i=0;i<=75000;i++);
 8000210:	2300      	movs	r3, #0
 8000212:	63bb      	str	r3, [r7, #56]	; 0x38
 8000214:	e002      	b.n	800021c <main+0x114>
 8000216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000218:	3301      	adds	r3, #1
 800021a:	63bb      	str	r3, [r7, #56]	; 0x38
 800021c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800021e:	4a0e      	ldr	r2, [pc, #56]	; (8000258 <main+0x150>)
 8000220:	4293      	cmp	r3, r2
 8000222:	ddf8      	ble.n	8000216 <main+0x10e>
		GPIOA->ODR ^= LED;
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	2390      	movs	r3, #144	; 0x90
 800022c:	05db      	lsls	r3, r3, #23
 800022e:	2120      	movs	r1, #32
 8000230:	404a      	eors	r2, r1
 8000232:	615a      	str	r2, [r3, #20]

		if(j>=17)j=0;
 8000234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000236:	2b10      	cmp	r3, #16
 8000238:	dddc      	ble.n	80001f4 <main+0xec>
 800023a:	2300      	movs	r3, #0
 800023c:	63fb      	str	r3, [r7, #60]	; 0x3c
		while((USART2->ISR & TXE)==0){}
 800023e:	e7d9      	b.n	80001f4 <main+0xec>
 8000240:	40021000 	.word	0x40021000
 8000244:	fffff7ff 	.word	0xfffff7ff
 8000248:	fffffbff 	.word	0xfffffbff
 800024c:	fffffdff 	.word	0xfffffdff
 8000250:	40004400 	.word	0x40004400
 8000254:	08000334 	.word	0x08000334
 8000258:	000124f8 	.word	0x000124f8

0800025c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000260:	e000      	b.n	8000264 <Reset_Handler+0x8>
 8000262:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <LoopForever+0x6>)
  ldr r1, =_edata
 8000266:	490d      	ldr	r1, [pc, #52]	; (800029c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <LoopForever+0xe>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800026c:	e002      	b.n	8000274 <LoopCopyDataInit>

0800026e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000272:	3304      	adds	r3, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000278:	d3f9      	bcc.n	800026e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027a:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800027c:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <LoopForever+0x16>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000280:	e001      	b.n	8000286 <LoopFillZerobss>

08000282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000284:	3204      	adds	r2, #4

08000286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000288:	d3fb      	bcc.n	8000282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028a:	f000 f819 	bl	80002c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ff3b 	bl	8000108 <main>

08000292 <LoopForever>:

LoopForever:
  b LoopForever
 8000292:	e7fe      	b.n	8000292 <LoopForever>
  ldr   r0, =_estack
 8000294:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800029c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a0:	08000350 	.word	0x08000350
  ldr r2, =_sbss
 80002a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a8:	2000001c 	.word	0x2000001c

080002ac <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC_COMP_IRQHandler>

080002ae <memset>:
 80002ae:	0003      	movs	r3, r0
 80002b0:	1882      	adds	r2, r0, r2
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d100      	bne.n	80002b8 <memset+0xa>
 80002b6:	4770      	bx	lr
 80002b8:	7019      	strb	r1, [r3, #0]
 80002ba:	3301      	adds	r3, #1
 80002bc:	e7f9      	b.n	80002b2 <memset+0x4>
	...

080002c0 <__libc_init_array>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	2600      	movs	r6, #0
 80002c4:	4c0c      	ldr	r4, [pc, #48]	; (80002f8 <__libc_init_array+0x38>)
 80002c6:	4d0d      	ldr	r5, [pc, #52]	; (80002fc <__libc_init_array+0x3c>)
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	10a4      	asrs	r4, r4, #2
 80002cc:	42a6      	cmp	r6, r4
 80002ce:	d109      	bne.n	80002e4 <__libc_init_array+0x24>
 80002d0:	2600      	movs	r6, #0
 80002d2:	f000 f823 	bl	800031c <_init>
 80002d6:	4c0a      	ldr	r4, [pc, #40]	; (8000300 <__libc_init_array+0x40>)
 80002d8:	4d0a      	ldr	r5, [pc, #40]	; (8000304 <__libc_init_array+0x44>)
 80002da:	1b64      	subs	r4, r4, r5
 80002dc:	10a4      	asrs	r4, r4, #2
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d105      	bne.n	80002ee <__libc_init_array+0x2e>
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	00b3      	lsls	r3, r6, #2
 80002e6:	58eb      	ldr	r3, [r5, r3]
 80002e8:	4798      	blx	r3
 80002ea:	3601      	adds	r6, #1
 80002ec:	e7ee      	b.n	80002cc <__libc_init_array+0xc>
 80002ee:	00b3      	lsls	r3, r6, #2
 80002f0:	58eb      	ldr	r3, [r5, r3]
 80002f2:	4798      	blx	r3
 80002f4:	3601      	adds	r6, #1
 80002f6:	e7f2      	b.n	80002de <__libc_init_array+0x1e>
 80002f8:	08000348 	.word	0x08000348
 80002fc:	08000348 	.word	0x08000348
 8000300:	0800034c 	.word	0x0800034c
 8000304:	08000348 	.word	0x08000348

08000308 <memcpy>:
 8000308:	2300      	movs	r3, #0
 800030a:	b510      	push	{r4, lr}
 800030c:	429a      	cmp	r2, r3
 800030e:	d100      	bne.n	8000312 <memcpy+0xa>
 8000310:	bd10      	pop	{r4, pc}
 8000312:	5ccc      	ldrb	r4, [r1, r3]
 8000314:	54c4      	strb	r4, [r0, r3]
 8000316:	3301      	adds	r3, #1
 8000318:	e7f8      	b.n	800030c <memcpy+0x4>
	...

0800031c <_init>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr

08000328 <_fini>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr
