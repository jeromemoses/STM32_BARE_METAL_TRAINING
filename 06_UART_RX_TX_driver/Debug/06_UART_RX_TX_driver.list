
06_UART_RX_TX_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b4  080003bc  000103bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b4  080003b4  000103bc  2**0
                  CONTENTS
  4 .ARM          00000000  080003b4  080003b4  000103bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b4  080003bc  000103bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b4  080003b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003bc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003bc  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000103bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004bc  00000000  00000000  00010427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000217  00000000  00000000  000108e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  00010b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012437  00000000  00000000  00010bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000af0  00000000  00000000  00022ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006239a  00000000  00000000  00023aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000c0  00000000  00000000  00085e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00085f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800039c 	.word	0x0800039c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800039c 	.word	0x0800039c

08000108 <main>:
#include <stdbool.h>
#include "uart.h"

int chr;

int main(void) {
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0

	uart_init();
 800010c:	f000 f822 	bl	8000154 <uart_init>


	while(1)
	{

		chr = uart_read();
 8000110:	f000 f8e6 	bl	80002e0 <uart_read>
 8000114:	0002      	movs	r2, r0
 8000116:	4b0e      	ldr	r3, [pc, #56]	; (8000150 <main+0x48>)
 8000118:	601a      	str	r2, [r3, #0]
		uart_write(chr);
 800011a:	4b0d      	ldr	r3, [pc, #52]	; (8000150 <main+0x48>)
 800011c:	681b      	ldr	r3, [r3, #0]
 800011e:	0018      	movs	r0, r3
 8000120:	f000 f8c6 	bl	80002b0 <uart_write>

		if(chr == '1')
 8000124:	4b0a      	ldr	r3, [pc, #40]	; (8000150 <main+0x48>)
 8000126:	681b      	ldr	r3, [r3, #0]
 8000128:	2b31      	cmp	r3, #49	; 0x31
 800012a:	d108      	bne.n	800013e <main+0x36>
		{
			GPIOA->ODR |= LED;
 800012c:	2390      	movs	r3, #144	; 0x90
 800012e:	05db      	lsls	r3, r3, #23
 8000130:	695a      	ldr	r2, [r3, #20]
 8000132:	2390      	movs	r3, #144	; 0x90
 8000134:	05db      	lsls	r3, r3, #23
 8000136:	2120      	movs	r1, #32
 8000138:	430a      	orrs	r2, r1
 800013a:	615a      	str	r2, [r3, #20]
 800013c:	e7e8      	b.n	8000110 <main+0x8>
		}
		else
		{
			GPIOA->ODR &= ~LED;
 800013e:	2390      	movs	r3, #144	; 0x90
 8000140:	05db      	lsls	r3, r3, #23
 8000142:	695a      	ldr	r2, [r3, #20]
 8000144:	2390      	movs	r3, #144	; 0x90
 8000146:	05db      	lsls	r3, r3, #23
 8000148:	2120      	movs	r1, #32
 800014a:	438a      	bics	r2, r1
 800014c:	615a      	str	r2, [r3, #20]
		chr = uart_read();
 800014e:	e7df      	b.n	8000110 <main+0x8>
 8000150:	2000001c 	.word	0x2000001c

08000154 <uart_init>:
#define OVER8 		(1U<<15)
#define TXE			(1U<<7)
#define RXNE		(1U<<5)

void uart_init(void)
{
 8000154:	b580      	push	{r7, lr}
 8000156:	af00      	add	r7, sp, #0
	//set clock to GPIO A port
		RCC->AHBENR |= GPIOAEN;
 8000158:	4b4d      	ldr	r3, [pc, #308]	; (8000290 <uart_init+0x13c>)
 800015a:	695a      	ldr	r2, [r3, #20]
 800015c:	4b4c      	ldr	r3, [pc, #304]	; (8000290 <uart_init+0x13c>)
 800015e:	2180      	movs	r1, #128	; 0x80
 8000160:	0289      	lsls	r1, r1, #10
 8000162:	430a      	orrs	r2, r1
 8000164:	615a      	str	r2, [r3, #20]

		//setting PA2 (UART TX pins) as for alternative function for UART pin
		GPIOA->MODER |= (1U<<5);
 8000166:	2390      	movs	r3, #144	; 0x90
 8000168:	05db      	lsls	r3, r3, #23
 800016a:	681a      	ldr	r2, [r3, #0]
 800016c:	2390      	movs	r3, #144	; 0x90
 800016e:	05db      	lsls	r3, r3, #23
 8000170:	2120      	movs	r1, #32
 8000172:	430a      	orrs	r2, r1
 8000174:	601a      	str	r2, [r3, #0]
		GPIOA->MODER &= ~(1U<<4);
 8000176:	2390      	movs	r3, #144	; 0x90
 8000178:	05db      	lsls	r3, r3, #23
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	2390      	movs	r3, #144	; 0x90
 800017e:	05db      	lsls	r3, r3, #23
 8000180:	2110      	movs	r1, #16
 8000182:	438a      	bics	r2, r1
 8000184:	601a      	str	r2, [r3, #0]

		//setting PA3 (UART RX pins) as for alternative function for UART pin
		GPIOA->MODER |= (1U<<7);
 8000186:	2390      	movs	r3, #144	; 0x90
 8000188:	05db      	lsls	r3, r3, #23
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	2390      	movs	r3, #144	; 0x90
 800018e:	05db      	lsls	r3, r3, #23
 8000190:	2180      	movs	r1, #128	; 0x80
 8000192:	430a      	orrs	r2, r1
 8000194:	601a      	str	r2, [r3, #0]
		GPIOA->MODER &= ~(1U<<6);
 8000196:	2390      	movs	r3, #144	; 0x90
 8000198:	05db      	lsls	r3, r3, #23
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	2390      	movs	r3, #144	; 0x90
 800019e:	05db      	lsls	r3, r3, #23
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	438a      	bics	r2, r1
 80001a4:	601a      	str	r2, [r3, #0]

		//Setting GPIOA - Pin 5 as a output with moder Register
		GPIOA->MODER |= (1U << 10);
 80001a6:	2390      	movs	r3, #144	; 0x90
 80001a8:	05db      	lsls	r3, r3, #23
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	2390      	movs	r3, #144	; 0x90
 80001ae:	05db      	lsls	r3, r3, #23
 80001b0:	2180      	movs	r1, #128	; 0x80
 80001b2:	00c9      	lsls	r1, r1, #3
 80001b4:	430a      	orrs	r2, r1
 80001b6:	601a      	str	r2, [r3, #0]
		GPIOA->MODER &= ~(1U << 11);
 80001b8:	2390      	movs	r3, #144	; 0x90
 80001ba:	05db      	lsls	r3, r3, #23
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	2390      	movs	r3, #144	; 0x90
 80001c0:	05db      	lsls	r3, r3, #23
 80001c2:	4934      	ldr	r1, [pc, #208]	; (8000294 <uart_init+0x140>)
 80001c4:	400a      	ands	r2, r1
 80001c6:	601a      	str	r2, [r3, #0]

		//Setting PA2 as UART2 TX
		GPIOA->AFR[0] &= ~(1U<<11);
 80001c8:	2390      	movs	r3, #144	; 0x90
 80001ca:	05db      	lsls	r3, r3, #23
 80001cc:	6a1a      	ldr	r2, [r3, #32]
 80001ce:	2390      	movs	r3, #144	; 0x90
 80001d0:	05db      	lsls	r3, r3, #23
 80001d2:	4930      	ldr	r1, [pc, #192]	; (8000294 <uart_init+0x140>)
 80001d4:	400a      	ands	r2, r1
 80001d6:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<10);
 80001d8:	2390      	movs	r3, #144	; 0x90
 80001da:	05db      	lsls	r3, r3, #23
 80001dc:	6a1a      	ldr	r2, [r3, #32]
 80001de:	2390      	movs	r3, #144	; 0x90
 80001e0:	05db      	lsls	r3, r3, #23
 80001e2:	492d      	ldr	r1, [pc, #180]	; (8000298 <uart_init+0x144>)
 80001e4:	400a      	ands	r2, r1
 80001e6:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<9);
 80001e8:	2390      	movs	r3, #144	; 0x90
 80001ea:	05db      	lsls	r3, r3, #23
 80001ec:	6a1a      	ldr	r2, [r3, #32]
 80001ee:	2390      	movs	r3, #144	; 0x90
 80001f0:	05db      	lsls	r3, r3, #23
 80001f2:	492a      	ldr	r1, [pc, #168]	; (800029c <uart_init+0x148>)
 80001f4:	400a      	ands	r2, r1
 80001f6:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] |= (1U<<8);
 80001f8:	2390      	movs	r3, #144	; 0x90
 80001fa:	05db      	lsls	r3, r3, #23
 80001fc:	6a1a      	ldr	r2, [r3, #32]
 80001fe:	2390      	movs	r3, #144	; 0x90
 8000200:	05db      	lsls	r3, r3, #23
 8000202:	2180      	movs	r1, #128	; 0x80
 8000204:	0049      	lsls	r1, r1, #1
 8000206:	430a      	orrs	r2, r1
 8000208:	621a      	str	r2, [r3, #32]

		//Setting PA3 as UART2 RX
		GPIOA->AFR[0] &= ~(1U<<15);
 800020a:	2390      	movs	r3, #144	; 0x90
 800020c:	05db      	lsls	r3, r3, #23
 800020e:	6a1a      	ldr	r2, [r3, #32]
 8000210:	2390      	movs	r3, #144	; 0x90
 8000212:	05db      	lsls	r3, r3, #23
 8000214:	4922      	ldr	r1, [pc, #136]	; (80002a0 <uart_init+0x14c>)
 8000216:	400a      	ands	r2, r1
 8000218:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<14);
 800021a:	2390      	movs	r3, #144	; 0x90
 800021c:	05db      	lsls	r3, r3, #23
 800021e:	6a1a      	ldr	r2, [r3, #32]
 8000220:	2390      	movs	r3, #144	; 0x90
 8000222:	05db      	lsls	r3, r3, #23
 8000224:	491f      	ldr	r1, [pc, #124]	; (80002a4 <uart_init+0x150>)
 8000226:	400a      	ands	r2, r1
 8000228:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<13);
 800022a:	2390      	movs	r3, #144	; 0x90
 800022c:	05db      	lsls	r3, r3, #23
 800022e:	6a1a      	ldr	r2, [r3, #32]
 8000230:	2390      	movs	r3, #144	; 0x90
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	491c      	ldr	r1, [pc, #112]	; (80002a8 <uart_init+0x154>)
 8000236:	400a      	ands	r2, r1
 8000238:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] |= (1U<<12);
 800023a:	2390      	movs	r3, #144	; 0x90
 800023c:	05db      	lsls	r3, r3, #23
 800023e:	6a1a      	ldr	r2, [r3, #32]
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	0149      	lsls	r1, r1, #5
 8000248:	430a      	orrs	r2, r1
 800024a:	621a      	str	r2, [r3, #32]

		//setting clock to Advanced peripheral bus for USART
		RCC->APB1ENR |= USART2EN;
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <uart_init+0x13c>)
 800024e:	69da      	ldr	r2, [r3, #28]
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <uart_init+0x13c>)
 8000252:	2180      	movs	r1, #128	; 0x80
 8000254:	0289      	lsls	r1, r1, #10
 8000256:	430a      	orrs	r2, r1
 8000258:	61da      	str	r2, [r3, #28]
		 * baudrate = Fclk / USARTDIV
		 *
		 * */

		//sets the baud rate
		USART2->BRR |= (periphCLK / BAUDRATE);//(periphCLK + (BAUDRATE/2)) / BAUDRATE;
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <uart_init+0x158>)
 800025c:	68da      	ldr	r2, [r3, #12]
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <uart_init+0x158>)
 8000260:	2145      	movs	r1, #69	; 0x45
 8000262:	430a      	orrs	r2, r1
 8000264:	60da      	str	r2, [r3, #12]

		//Enable transmitter
		USART2->CR1 |= TE;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <uart_init+0x158>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <uart_init+0x158>)
 800026c:	2108      	movs	r1, #8
 800026e:	430a      	orrs	r2, r1
 8000270:	601a      	str	r2, [r3, #0]

		//Enable receiver
		USART2->CR1 |= RE;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <uart_init+0x158>)
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <uart_init+0x158>)
 8000278:	2104      	movs	r1, #4
 800027a:	430a      	orrs	r2, r1
 800027c:	601a      	str	r2, [r3, #0]

		//Enable the USART2
		USART2->CR1 |= UE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <uart_init+0x158>)
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <uart_init+0x158>)
 8000284:	2101      	movs	r1, #1
 8000286:	430a      	orrs	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40021000 	.word	0x40021000
 8000294:	fffff7ff 	.word	0xfffff7ff
 8000298:	fffffbff 	.word	0xfffffbff
 800029c:	fffffdff 	.word	0xfffffdff
 80002a0:	ffff7fff 	.word	0xffff7fff
 80002a4:	ffffbfff 	.word	0xffffbfff
 80002a8:	ffffdfff 	.word	0xffffdfff
 80002ac:	40004400 	.word	0x40004400

080002b0 <uart_write>:

void uart_write(int ch)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	//waits until the TXE becomes 1
	while ((USART2->ISR & TXE) == 0);
 80002b8:	46c0      	nop			; (mov r8, r8)
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <uart_write+0x2c>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	4013      	ands	r3, r2
 80002c2:	d0fa      	beq.n	80002ba <uart_write+0xa>

	USART2->TDR = (ch & 0xff);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <uart_write+0x2c>)
 80002ca:	21ff      	movs	r1, #255	; 0xff
 80002cc:	400b      	ands	r3, r1
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	8513      	strh	r3, [r2, #40]	; 0x28
}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b002      	add	sp, #8
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	40004400 	.word	0x40004400

080002e0 <uart_read>:

int uart_read(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//waits until the RXNE becomes 1
	while((USART2->ISR & RXNE) == 0);
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	4b05      	ldr	r3, [pc, #20]	; (80002fc <uart_read+0x1c>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	2220      	movs	r2, #32
 80002ec:	4013      	ands	r3, r2
 80002ee:	d0fa      	beq.n	80002e6 <uart_read+0x6>

	return USART2->RDR;
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <uart_read+0x1c>)
 80002f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80002f4:	b29b      	uxth	r3, r3
}
 80002f6:	0018      	movs	r0, r3
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40004400 	.word	0x40004400

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000304:	e000      	b.n	8000308 <Reset_Handler+0x8>
 8000306:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	; (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	; (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	; (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 f811 	bl	8000354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff fee9 	bl	8000108 <main>

08000336 <LoopForever>:

LoopForever:
  b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000344:	080003bc 	.word	0x080003bc
  ldr r2, =_sbss
 8000348:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800034c:	20000020 	.word	0x20000020

08000350 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_COMP_IRQHandler>
	...

08000354 <__libc_init_array>:
 8000354:	b570      	push	{r4, r5, r6, lr}
 8000356:	2600      	movs	r6, #0
 8000358:	4c0c      	ldr	r4, [pc, #48]	; (800038c <__libc_init_array+0x38>)
 800035a:	4d0d      	ldr	r5, [pc, #52]	; (8000390 <__libc_init_array+0x3c>)
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	10a4      	asrs	r4, r4, #2
 8000360:	42a6      	cmp	r6, r4
 8000362:	d109      	bne.n	8000378 <__libc_init_array+0x24>
 8000364:	2600      	movs	r6, #0
 8000366:	f000 f819 	bl	800039c <_init>
 800036a:	4c0a      	ldr	r4, [pc, #40]	; (8000394 <__libc_init_array+0x40>)
 800036c:	4d0a      	ldr	r5, [pc, #40]	; (8000398 <__libc_init_array+0x44>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	42a6      	cmp	r6, r4
 8000374:	d105      	bne.n	8000382 <__libc_init_array+0x2e>
 8000376:	bd70      	pop	{r4, r5, r6, pc}
 8000378:	00b3      	lsls	r3, r6, #2
 800037a:	58eb      	ldr	r3, [r5, r3]
 800037c:	4798      	blx	r3
 800037e:	3601      	adds	r6, #1
 8000380:	e7ee      	b.n	8000360 <__libc_init_array+0xc>
 8000382:	00b3      	lsls	r3, r6, #2
 8000384:	58eb      	ldr	r3, [r5, r3]
 8000386:	4798      	blx	r3
 8000388:	3601      	adds	r6, #1
 800038a:	e7f2      	b.n	8000372 <__libc_init_array+0x1e>
 800038c:	080003b4 	.word	0x080003b4
 8000390:	080003b4 	.word	0x080003b4
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b4 	.word	0x080003b4

0800039c <_init>:
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a2:	bc08      	pop	{r3}
 80003a4:	469e      	mov	lr, r3
 80003a6:	4770      	bx	lr

080003a8 <_fini>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr
