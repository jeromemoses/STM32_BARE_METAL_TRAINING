
10_systick_Interrupt_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  4 .ARM          00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800039c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800039c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000683  00000000  00000000  00010407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000034c  00000000  00000000  00010a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00010dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007d  00000000  00000000  00010e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e6e  00000000  00000000  00010f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011ec  00000000  00000000  00011d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00065edc  00000000  00000000  00012f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000180  00000000  00000000  00078e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00078fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800037c 	.word	0x0800037c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800037c 	.word	0x0800037c

08000108 <main>:
#define LED (1U<<5);

long int counterV = 0;

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0

	//initialize uart
	uart_init();
 800010c:	f000 f83a 	bl	8000184 <uart_init>

	//initialize systick interrupt
	systick_interrupt_init();
 8000110:	f000 f816 	bl	8000140 <systick_interrupt_init>

	while(1)
 8000114:	e7fe      	b.n	8000114 <main+0xc>

08000116 <systick_callback>:

	}
}

static void systick_callback (void)
{
 8000116:	b580      	push	{r7, lr}
 8000118:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= LED;
 800011a:	2390      	movs	r3, #144	; 0x90
 800011c:	05db      	lsls	r3, r3, #23
 800011e:	695a      	ldr	r2, [r3, #20]
 8000120:	2390      	movs	r3, #144	; 0x90
 8000122:	05db      	lsls	r3, r3, #23
 8000124:	2120      	movs	r1, #32
 8000126:	404a      	eors	r2, r1
 8000128:	615a      	str	r2, [r3, #20]
}
 800012a:	46c0      	nop			; (mov r8, r8)
 800012c:	46bd      	mov	sp, r7
 800012e:	bd80      	pop	{r7, pc}

08000130 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000130:	b580      	push	{r7, lr}
 8000132:	af00      	add	r7, sp, #0
	//do anything you want call back function
	systick_callback();
 8000134:	f7ff ffef 	bl	8000116 <systick_callback>
}
 8000138:	46c0      	nop			; (mov r8, r8)
 800013a:	46bd      	mov	sp, r7
 800013c:	bd80      	pop	{r7, pc}
	...

08000140 <systick_interrupt_init>:
	SysTick->CTRL = 0;
}


void systick_interrupt_init(void)
{
 8000140:	b580      	push	{r7, lr}
 8000142:	af00      	add	r7, sp, #0
	//load the systick value for 1 nano second in SysTick->LOAD register
	SysTick->LOAD = SYSTICK_ONE_SECOND;
 8000144:	4b0d      	ldr	r3, [pc, #52]	; (800017c <systick_interrupt_init+0x3c>)
 8000146:	4a0e      	ldr	r2, [pc, #56]	; (8000180 <systick_interrupt_init+0x40>)
 8000148:	605a      	str	r2, [r3, #4]

	//clear the value the value inside sitick
	SysTick->VAL = 0;
 800014a:	4b0c      	ldr	r3, [pc, #48]	; (800017c <systick_interrupt_init+0x3c>)
 800014c:	2200      	movs	r2, #0
 800014e:	609a      	str	r2, [r3, #8]

	//Enable system clock in SysTick->CTRL (CVR) register // check CMSIS generic guide
	SysTick->CTRL |= SYSTICK_ENABLE;
 8000150:	4b0a      	ldr	r3, [pc, #40]	; (800017c <systick_interrupt_init+0x3c>)
 8000152:	681a      	ldr	r2, [r3, #0]
 8000154:	4b09      	ldr	r3, [pc, #36]	; (800017c <systick_interrupt_init+0x3c>)
 8000156:	2101      	movs	r1, #1
 8000158:	430a      	orrs	r2, r1
 800015a:	601a      	str	r2, [r3, #0]

	//enable processor clock
	SysTick->CTRL |= SYSTICK_CLOCK_SOURCE;
 800015c:	4b07      	ldr	r3, [pc, #28]	; (800017c <systick_interrupt_init+0x3c>)
 800015e:	681a      	ldr	r2, [r3, #0]
 8000160:	4b06      	ldr	r3, [pc, #24]	; (800017c <systick_interrupt_init+0x3c>)
 8000162:	2104      	movs	r1, #4
 8000164:	430a      	orrs	r2, r1
 8000166:	601a      	str	r2, [r3, #0]

	//enable the systick interrupt
	SysTick->CTRL |= TICKINT;
 8000168:	4b04      	ldr	r3, [pc, #16]	; (800017c <systick_interrupt_init+0x3c>)
 800016a:	681a      	ldr	r2, [r3, #0]
 800016c:	4b03      	ldr	r3, [pc, #12]	; (800017c <systick_interrupt_init+0x3c>)
 800016e:	2102      	movs	r1, #2
 8000170:	430a      	orrs	r2, r1
 8000172:	601a      	str	r2, [r3, #0]
}
 8000174:	46c0      	nop			; (mov r8, r8)
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	46c0      	nop			; (mov r8, r8)
 800017c:	e000e010 	.word	0xe000e010
 8000180:	007a1200 	.word	0x007a1200

08000184 <uart_init>:
#define RXNE		(1U<<5)

int blink_flag = 0;

void uart_init(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	//set clock to GPIO A port
		RCC->AHBENR |= GPIOAEN;
 8000188:	4b4d      	ldr	r3, [pc, #308]	; (80002c0 <uart_init+0x13c>)
 800018a:	695a      	ldr	r2, [r3, #20]
 800018c:	4b4c      	ldr	r3, [pc, #304]	; (80002c0 <uart_init+0x13c>)
 800018e:	2180      	movs	r1, #128	; 0x80
 8000190:	0289      	lsls	r1, r1, #10
 8000192:	430a      	orrs	r2, r1
 8000194:	615a      	str	r2, [r3, #20]

		//setting PA2 (UART TX pins) as for alternative function for UART pin
		GPIOA->MODER |= (1U<<5);
 8000196:	2390      	movs	r3, #144	; 0x90
 8000198:	05db      	lsls	r3, r3, #23
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	2390      	movs	r3, #144	; 0x90
 800019e:	05db      	lsls	r3, r3, #23
 80001a0:	2120      	movs	r1, #32
 80001a2:	430a      	orrs	r2, r1
 80001a4:	601a      	str	r2, [r3, #0]
		GPIOA->MODER &= ~(1U<<4);
 80001a6:	2390      	movs	r3, #144	; 0x90
 80001a8:	05db      	lsls	r3, r3, #23
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	2390      	movs	r3, #144	; 0x90
 80001ae:	05db      	lsls	r3, r3, #23
 80001b0:	2110      	movs	r1, #16
 80001b2:	438a      	bics	r2, r1
 80001b4:	601a      	str	r2, [r3, #0]

		//setting PA3 (UART RX pins) as for alternative function for UART pin
		GPIOA->MODER |= (1U<<7);
 80001b6:	2390      	movs	r3, #144	; 0x90
 80001b8:	05db      	lsls	r3, r3, #23
 80001ba:	681a      	ldr	r2, [r3, #0]
 80001bc:	2390      	movs	r3, #144	; 0x90
 80001be:	05db      	lsls	r3, r3, #23
 80001c0:	2180      	movs	r1, #128	; 0x80
 80001c2:	430a      	orrs	r2, r1
 80001c4:	601a      	str	r2, [r3, #0]
		GPIOA->MODER &= ~(1U<<6);
 80001c6:	2390      	movs	r3, #144	; 0x90
 80001c8:	05db      	lsls	r3, r3, #23
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	2390      	movs	r3, #144	; 0x90
 80001ce:	05db      	lsls	r3, r3, #23
 80001d0:	2140      	movs	r1, #64	; 0x40
 80001d2:	438a      	bics	r2, r1
 80001d4:	601a      	str	r2, [r3, #0]

		//Setting GPIOA - Pin 5 as a output with moder Register
		GPIOA->MODER |= (1U << 10);
 80001d6:	2390      	movs	r3, #144	; 0x90
 80001d8:	05db      	lsls	r3, r3, #23
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	2390      	movs	r3, #144	; 0x90
 80001de:	05db      	lsls	r3, r3, #23
 80001e0:	2180      	movs	r1, #128	; 0x80
 80001e2:	00c9      	lsls	r1, r1, #3
 80001e4:	430a      	orrs	r2, r1
 80001e6:	601a      	str	r2, [r3, #0]
		GPIOA->MODER &= ~(1U << 11);
 80001e8:	2390      	movs	r3, #144	; 0x90
 80001ea:	05db      	lsls	r3, r3, #23
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	2390      	movs	r3, #144	; 0x90
 80001f0:	05db      	lsls	r3, r3, #23
 80001f2:	4934      	ldr	r1, [pc, #208]	; (80002c4 <uart_init+0x140>)
 80001f4:	400a      	ands	r2, r1
 80001f6:	601a      	str	r2, [r3, #0]

		//Setting PA2 as UART2 TX
		GPIOA->AFR[0] &= ~(1U<<11);
 80001f8:	2390      	movs	r3, #144	; 0x90
 80001fa:	05db      	lsls	r3, r3, #23
 80001fc:	6a1a      	ldr	r2, [r3, #32]
 80001fe:	2390      	movs	r3, #144	; 0x90
 8000200:	05db      	lsls	r3, r3, #23
 8000202:	4930      	ldr	r1, [pc, #192]	; (80002c4 <uart_init+0x140>)
 8000204:	400a      	ands	r2, r1
 8000206:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<10);
 8000208:	2390      	movs	r3, #144	; 0x90
 800020a:	05db      	lsls	r3, r3, #23
 800020c:	6a1a      	ldr	r2, [r3, #32]
 800020e:	2390      	movs	r3, #144	; 0x90
 8000210:	05db      	lsls	r3, r3, #23
 8000212:	492d      	ldr	r1, [pc, #180]	; (80002c8 <uart_init+0x144>)
 8000214:	400a      	ands	r2, r1
 8000216:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<9);
 8000218:	2390      	movs	r3, #144	; 0x90
 800021a:	05db      	lsls	r3, r3, #23
 800021c:	6a1a      	ldr	r2, [r3, #32]
 800021e:	2390      	movs	r3, #144	; 0x90
 8000220:	05db      	lsls	r3, r3, #23
 8000222:	492a      	ldr	r1, [pc, #168]	; (80002cc <uart_init+0x148>)
 8000224:	400a      	ands	r2, r1
 8000226:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] |= (1U<<8);
 8000228:	2390      	movs	r3, #144	; 0x90
 800022a:	05db      	lsls	r3, r3, #23
 800022c:	6a1a      	ldr	r2, [r3, #32]
 800022e:	2390      	movs	r3, #144	; 0x90
 8000230:	05db      	lsls	r3, r3, #23
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	0049      	lsls	r1, r1, #1
 8000236:	430a      	orrs	r2, r1
 8000238:	621a      	str	r2, [r3, #32]

		//Setting PA3 as UART2 RX
		GPIOA->AFR[0] &= ~(1U<<15);
 800023a:	2390      	movs	r3, #144	; 0x90
 800023c:	05db      	lsls	r3, r3, #23
 800023e:	6a1a      	ldr	r2, [r3, #32]
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	4922      	ldr	r1, [pc, #136]	; (80002d0 <uart_init+0x14c>)
 8000246:	400a      	ands	r2, r1
 8000248:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<14);
 800024a:	2390      	movs	r3, #144	; 0x90
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	6a1a      	ldr	r2, [r3, #32]
 8000250:	2390      	movs	r3, #144	; 0x90
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	491f      	ldr	r1, [pc, #124]	; (80002d4 <uart_init+0x150>)
 8000256:	400a      	ands	r2, r1
 8000258:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<13);
 800025a:	2390      	movs	r3, #144	; 0x90
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	6a1a      	ldr	r2, [r3, #32]
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	491c      	ldr	r1, [pc, #112]	; (80002d8 <uart_init+0x154>)
 8000266:	400a      	ands	r2, r1
 8000268:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] |= (1U<<12);
 800026a:	2390      	movs	r3, #144	; 0x90
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	6a1a      	ldr	r2, [r3, #32]
 8000270:	2390      	movs	r3, #144	; 0x90
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0149      	lsls	r1, r1, #5
 8000278:	430a      	orrs	r2, r1
 800027a:	621a      	str	r2, [r3, #32]

		//setting clock to Advanced peripheral bus for USART
		RCC->APB1ENR |= USART2EN;
 800027c:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <uart_init+0x13c>)
 800027e:	69da      	ldr	r2, [r3, #28]
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <uart_init+0x13c>)
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	0289      	lsls	r1, r1, #10
 8000286:	430a      	orrs	r2, r1
 8000288:	61da      	str	r2, [r3, #28]
		 * baudrate = Fclk / USARTDIV
		 *
		 * */

		//sets the baud rate
		USART2->BRR |= (periphCLK / BAUDRATE);//(periphCLK + (BAUDRATE/2)) / BAUDRATE;
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <uart_init+0x158>)
 800028c:	68da      	ldr	r2, [r3, #12]
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <uart_init+0x158>)
 8000290:	2145      	movs	r1, #69	; 0x45
 8000292:	430a      	orrs	r2, r1
 8000294:	60da      	str	r2, [r3, #12]

		//Enable transmitter
		USART2->CR1 |= TE;
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <uart_init+0x158>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <uart_init+0x158>)
 800029c:	2108      	movs	r1, #8
 800029e:	430a      	orrs	r2, r1
 80002a0:	601a      	str	r2, [r3, #0]

		//Enable receiver
		USART2->CR1 |= RE;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <uart_init+0x158>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <uart_init+0x158>)
 80002a8:	2104      	movs	r1, #4
 80002aa:	430a      	orrs	r2, r1
 80002ac:	601a      	str	r2, [r3, #0]

		//Enable the USART2
		USART2->CR1 |= UE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <uart_init+0x158>)
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <uart_init+0x158>)
 80002b4:	2101      	movs	r1, #1
 80002b6:	430a      	orrs	r2, r1
 80002b8:	601a      	str	r2, [r3, #0]
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40021000 	.word	0x40021000
 80002c4:	fffff7ff 	.word	0xfffff7ff
 80002c8:	fffffbff 	.word	0xfffffbff
 80002cc:	fffffdff 	.word	0xfffffdff
 80002d0:	ffff7fff 	.word	0xffff7fff
 80002d4:	ffffbfff 	.word	0xffffbfff
 80002d8:	ffffdfff 	.word	0xffffdfff
 80002dc:	40004400 	.word	0x40004400

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e4:	e000      	b.n	80002e8 <Reset_Handler+0x8>
 80002e6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	; (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 f811 	bl	8000334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff fef9 	bl	8000108 <main>

08000316 <LoopForever>:

LoopForever:
  b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC_COMP_IRQHandler>
	...

08000334 <__libc_init_array>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	2600      	movs	r6, #0
 8000338:	4c0c      	ldr	r4, [pc, #48]	; (800036c <__libc_init_array+0x38>)
 800033a:	4d0d      	ldr	r5, [pc, #52]	; (8000370 <__libc_init_array+0x3c>)
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	42a6      	cmp	r6, r4
 8000342:	d109      	bne.n	8000358 <__libc_init_array+0x24>
 8000344:	2600      	movs	r6, #0
 8000346:	f000 f819 	bl	800037c <_init>
 800034a:	4c0a      	ldr	r4, [pc, #40]	; (8000374 <__libc_init_array+0x40>)
 800034c:	4d0a      	ldr	r5, [pc, #40]	; (8000378 <__libc_init_array+0x44>)
 800034e:	1b64      	subs	r4, r4, r5
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	42a6      	cmp	r6, r4
 8000354:	d105      	bne.n	8000362 <__libc_init_array+0x2e>
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	00b3      	lsls	r3, r6, #2
 800035a:	58eb      	ldr	r3, [r5, r3]
 800035c:	4798      	blx	r3
 800035e:	3601      	adds	r6, #1
 8000360:	e7ee      	b.n	8000340 <__libc_init_array+0xc>
 8000362:	00b3      	lsls	r3, r6, #2
 8000364:	58eb      	ldr	r3, [r5, r3]
 8000366:	4798      	blx	r3
 8000368:	3601      	adds	r6, #1
 800036a:	e7f2      	b.n	8000352 <__libc_init_array+0x1e>
 800036c:	08000394 	.word	0x08000394
 8000370:	08000394 	.word	0x08000394
 8000374:	08000398 	.word	0x08000398
 8000378:	08000394 	.word	0x08000394

0800037c <_init>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr

08000388 <_fini>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr
